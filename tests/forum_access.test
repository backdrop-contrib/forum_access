<?php
/**
 * @file
 * Tests for Forum Access module.
 */

require_once(backdrop_get_path('module', 'forum') . '/tests/forum.test');

/**
 * Functional tests for the Forum module, with Forum Access (and ACL) installed.
 */
class ForumAccess00PlainTestCase extends ForumTestCase {

  /**
   * Implements setUp().
   */
  function setUp($modules = array()) {
    parent::setUp();
    $modules = array('devel') + $modules;
    $files = system_rebuild_module_data();
    $available_modules = array();
    foreach ($modules as $module) {
      if (!empty($files[$module]) && !module_exists($module)) {
        $available_modules[] = $module;
      }
    }
    if (!empty($available_modules)) {
      module_enable($available_modules);
    }
    parent::resetAll();
  }

  /**
   * This test checks whether the Forum checkbox is enabled in the forum list.
   * With Forum Access enabled, the Forum checkbox necessarily gets disabled
   * and the test would fail.
   *
   * @see ForumTestCase::testEnableForumField()
   */
  function testEnableForumField() {
    $this->assertTrue(TRUE, 'Skip the testEnableForumField() test.');
  }

  /**
   * This test assumes that the node/add/forum page is accessible if there
   * are no forums defined. FA checks whether $user has Post access in any
   * forum, and if none is found, it returns a 403. This fulfills the
   * intention of the test.
   *
   * @see ForumTestCase::testAddOrphanTopic()
   */
  function testAddOrphanTopic() {
    $this->assertTrue(TRUE, 'Skip the testAddOrphanTopic() test.');
  }

}


require_once(backdrop_get_path('module', 'forum_access') . '/tests/forum_access_test_base.php');


/**
 * Initial configuration tests for the Forum Access module.
 */
class ForumAccess11InitialConfigurationTestCase extends ForumAccessBaseTestCase {

  function testInitialConfiguration() {
    $this->setUp2();
    $this->pass('#########################<br />#1 - START test initial configuration @' . (time() - $this->time), '######');

    // Show permissions grid.
    $this->backdropGet('admin/people/permissions/list');
    $this->assertResponse(200, '^^^ Permissions');
    // Show list of users.
    $this->backdropGet('admin/people');
    $this->assertResponse(200);
    // Show list of users.
    $this->backdropGet('admin/people', array('query' => array('sort' => 'asc', 'order' => backdrop_encode_path(t('Username')))));
    $this->assertResponse(200, '^^^ Users');
    // Show list of forums aka Forum Overview (only 'General discussion' at this point).
    $this->backdropGet('forum');
    $this->assertResponse(200, '^^^ Forums');
    // Show administrative list of forums.
    $this->backdropGet('admin/structure/forum');
    $this->assertResponse(200, '^^^ Forum Administration Overview');

    // Show default forum settings after installation of FA.
    $this->backdropGet('admin/structure/forum/edit/forum/1');
    $this->assertResponse(200, '^^^ Forum 1 Administration');

    // Verify the checked state of the checkboxes.
    foreach (array($this->webmaster_rid, $this->forum_admin_rid, $this->edit_any_content_rid, $this->edit_own_content_rid, $this->create_content_rid) as $rid) {
      $rid_checkbox = str_replace(' ', '-', $rid);
      foreach ($this->accesses as $access) {
        $this->assertNoFieldChecked("edit-forum-access-grants-checkboxes-$access-$rid_checkbox", "Role $rid does NOT have '$access'.");
      }
    }
    $this->assertNoFieldChecked("edit-forum-access-grants-checkboxes-view-administrator", "administrator does NOT have 'view'.");
    $this->assertNoFieldChecked("edit-forum-access-grants-checkboxes-create-administrator", "administrator does NOT have 'create'.");
    $this->assertFieldChecked(  "edit-forum-access-grants-checkboxes-update-administrator", "administrator has 'update'.");
    $this->assertFieldChecked(  "edit-forum-access-grants-checkboxes-delete-administrator", "administrator has 'delete'.");
    $this->assertFieldChecked(  "edit-forum-access-grants-checkboxes-view-anonymous", "anonymous has 'view'.");
    $this->assertNoFieldChecked("edit-forum-access-grants-checkboxes-create-anonymous", "anonymous does NOT have 'create'.");
    $this->assertNoFieldChecked("edit-forum-access-grants-checkboxes-update-anonymous", "anonymous does NOT have 'update'.");
    $this->assertNoFieldChecked("edit-forum-access-grants-checkboxes-delete-anonymous", "anonymous does NOT have 'delete'.");
    $this->assertFieldChecked(  "edit-forum-access-grants-checkboxes-view-authenticated", "authenticated has 'view'.");
    $this->assertFieldChecked(  "edit-forum-access-grants-checkboxes-create-authenticated", "authenticated has 'create'.");
    $this->assertNoFieldChecked("edit-forum-access-grants-checkboxes-update-authenticated", "authenticated does NOT have 'update'.");
    $this->assertNoFieldChecked("edit-forum-access-grants-checkboxes-delete-authenticated", "authenticated does NOT have 'delete'.");

    // Verify the enabled/disabled state of the checkboxes.
    foreach ($this->rids as $rid) {
      foreach ($this->accesses as $access) {
        $key = "$access-" . str_replace(' ', '-', $rid);
        if (array_search($key, array('update-administrator', 'delete-administrator')) !== FALSE) {
          $this->assertFieldDisabled("edit-forum-access-grants-checkboxes-$key", "Role $rid's '$access' checkbox is disabled.");
        }
        else {
          $this->assertFieldEnabled("edit-forum-access-grants-checkboxes-$key", "Role $rid's '$access' checkbox is enabled.");
        }
      }
    }

    // Remove the Backdrop default forum.
    $this->backdropGet('forum/1');
    $this->assertResponse(200);
    taxonomy_term_delete(1);
    $this->backdropGet('forum/1');
    $this->assertResponse(404);
    $this->backdropGet('forum');
    $this->assertResponse(200);
    $this->assertText(t('No forums defined'), 'Backdrop default forum removed.');

    $this->pass('#########################<br />#1 - END test initial configuration @' . (time() - $this->time), '######');
  }

}


/**
 * Default configuration test for the Forum Access module.
 */
class ForumAccess12DefaultConfigurationTestCase extends ForumAccessBaseTestCase {

  function testAccess2() {
    $this->setUp2();
    taxonomy_term_delete(1);
    $this->pass('#########################<br />#2 - START Default Configuration test @' . (time() - $this->time), '<a id="jump1" href="#jump2">/\<br />######<br />\/</a>');

    // Create a forum with default settings.
    //$this->backdropGet('admin/structure/forum/add/forum');
    //$this->assertResponse(200);
    $edit = array(
      'name' => 'Forum 2 (Default)',
      'description' => 'Default settings',
      'parent[0]' => 0,
      'weight' => '0',
      'forum_access[grants][checkboxes][view][authenticated]' => 'authenticated',
      'forum_access[grants][checkboxes][create][authenticated]' => 'authenticated',
    );
    $forum = (object) ($edit + array('tid' => 2));
    // Create forum.
    $this->backdropPost('admin/structure/forum/add/forum', $edit, t('Save'));
    $this->assertResponse(200, "$forum->name added.");
    $this->backdropGet("admin/structure/forum/edit/forum/$forum->tid");
    $this->assertResponse(200, "^^^ $forum->name exists, with these settings.");
    $this->backdropGet('forum');
    $this->assertResponse(200, 'Forum Overview');
    $this->checkForum($forum, TRUE);
    $this->pass('#########################<br />#2 - END Default Configuration test @' . (time() - $this->time), '<a id="jump2" href="#jump3">/\<br />######<br />\/</a>');
  }

}


/**
 * Read-Only configuration test for the Forum Access module.
 */
class ForumAccess13ReadOnlyConfigurationTestCase extends ForumAccessBaseTestCase {

  function testAccess3() {
    $this->createAndCheckForum(3, 'Read-Only', 'All View checkboxes checked', array('view'));
  }
}


/**
 * All-OFF configuration test for the Forum Access module.
 */
class ForumAccess14AllOffConfigurationTestCase extends ForumAccessBaseTestCase {

  function testAccess4() {
    $this->createAndCheckForum(4, 'All-OFF', 'All checkboxes cleared', array());
  }
}


/**
 * All-ON configuration test for the Forum Access module.
 */
class ForumAccess15AllOnConfigurationTestCase extends ForumAccessBaseTestCase {

  function testAccess5() {
    $this->createAndCheckForum(5, 'All-ON', 'All checkboxes checked', $this->accesses);
  }
}


/**
 * No-View configuration test for the Forum Access module.
 */
class ForumAccess16NoViewConfigurationTestCase extends ForumAccessBaseTestCase {

  function testAccess6() {
    $accesses = $this->accesses;
    array_shift($accesses);
    $this->createAndCheckForum(6, 'No-View', 'All checkboxes checked except View column', $accesses);
  }
}
